<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TweetsCollectorService</name>
    </assembly>
    <members>
        <member name="T:Jha.Services.TweetsCollectorService.Controllers.v1.TweetController">
            <summary>
            The tweet controller.
            </summary>
        </member>
        <member name="M:Jha.Services.TweetsCollectorService.Controllers.v1.TweetController.#ctor(Jha.Services.TweetsCollectorService.Services.Storage.IRepository{Jha.Services.TweetsCollectorService.Models.Twitter.Tweet},Microsoft.Extensions.Logging.ILogger{Jha.Services.TweetsCollectorService.Controllers.v1.TwitterController})">
            <summary>
            Initializes a new instance of the <see cref="T:Jha.Services.TweetsCollectorService.Controllers.v1.TweetController"/> class.
            </summary>
            <param name="tweetsRepository">The injected tweets repository.</param>
            <param name="logger">The injected logger.</param>
        </member>
        <member name="M:Jha.Services.TweetsCollectorService.Controllers.v1.TweetController.GetTweet(System.String)">
            <summary>
            GetTweet
            </summary>
            <remarks>
            Gets a tweet by the identifier from the storage.
            </remarks>
            <param name="id">Tweet identifier.</param>
            <returns>A tweet.</returns>
        </member>
        <member name="M:Jha.Services.TweetsCollectorService.Controllers.v1.TweetController.CreateTweet(Jha.Services.TweetsCollectorService.Models.Twitter.TweetText)">
            <summary>
            CreateTweet
            </summary>
            <remarks>
            Creates a new tweet.
            </remarks>
            <param name="tweet">Tweet text model.</param>
            <returns>A created tweet.</returns>
        </member>
        <member name="M:Jha.Services.TweetsCollectorService.Controllers.v1.TweetController.DeleteTweet(System.String)">
            <summary>
            DeleteTweet
            </summary>
            <remarks>
            Deletes an existing tweet.
            </remarks>
            <param name="id">Tweet identifier.</param>
            <returns>A deleted tweet.</returns>
        </member>
        <member name="T:Jha.Services.TweetsCollectorService.Controllers.v1.TwitterController">
            <summary>
            The Twitter API controller.
            </summary>
        </member>
        <member name="M:Jha.Services.TweetsCollectorService.Controllers.v1.TwitterController.#ctor(Jha.Services.TweetsCollectorService.Services.Storage.IRepository{Jha.Services.TweetsCollectorService.Models.Twitter.Tweet},Hangfire.IBackgroundJobClient,Jha.Services.TweetsCollectorService.Services.Hanfire.Twitter.ITwitterBackgroundJob,Jha.Services.TweetsCollectorService.Services.Twitter.ITwitterStatisticService,Microsoft.Extensions.Logging.ILogger{Jha.Services.TweetsCollectorService.Controllers.v1.TwitterController})">
            <summary>
            Initializes a new instance of the <see cref="T:Jha.Services.TweetsCollectorService.Controllers.v1.TwitterController"/> class.
            </summary>
            <param name="tweetsRepository">The injected tweets repository.</param>
            <param name="backgroundJobClient">The injected Hangfier background job client.</param>
            <param name="twitterBackgroundJob">The injected Twitter background job.</param>
            <param name="twitterStatisticService">The injected Twitter statistic service.</param>
            <param name="logger">The injected logger.</param>
        </member>
        <member name="M:Jha.Services.TweetsCollectorService.Controllers.v1.TwitterController.Count">
            <summary>
            Count
            </summary>
            <remarks>
            Gets a tweets count in the storage.
            </remarks>
            <returns>Tweets count.</returns>
        </member>
        <member name="M:Jha.Services.TweetsCollectorService.Controllers.v1.TwitterController.Clear">
            <summary>
            Clear
            </summary>
            <remarks>
            Erases the Twitter storage.
            </remarks>
        </member>
        <member name="M:Jha.Services.TweetsCollectorService.Controllers.v1.TwitterController.PullTweets">
            <summary>
            PullTweets
            </summary>
            <remarks>
            Starts a background job that pulls tweets from Twitter basic stream API.
            </remarks>
            <returns>The response with information about background job.</returns>
        </member>
        <member name="M:Jha.Services.TweetsCollectorService.Controllers.v1.TwitterController.Statistic">
            <summary>
            Statistic
            </summary>
            <remarks>
            Generates a statistics report of the Twitter storage.
            </remarks>
            <returns>The generated report.</returns>
        </member>
        <member name="T:Jha.Services.TweetsCollectorService.Models.Configuration.TwitterConfiguration">
            <summary>
            Model represents a Twitter services configuration.
            </summary>
        </member>
        <member name="F:Jha.Services.TweetsCollectorService.Models.Configuration.TwitterConfiguration.SectionPath">
            <summary>
            Configuration section name.
            </summary>
        </member>
        <member name="P:Jha.Services.TweetsCollectorService.Models.Configuration.TwitterConfiguration.BaseUri">
            <summary>
            Gets or sets the base Twitter API URL.
            </summary>
        </member>
        <member name="P:Jha.Services.TweetsCollectorService.Models.Configuration.TwitterConfiguration.BearerToken">
            <summary>
            Gets or sets the bearer auth token.
            </summary>
        </member>
        <member name="T:Jha.Services.TweetsCollectorService.Models.Responses.PullTweetsResponse">
            <summary>
            The pull tweets response model.
            </summary>
        </member>
        <member name="P:Jha.Services.TweetsCollectorService.Models.Responses.PullTweetsResponse.IsSuccess">
            <summary>
            Indicates whether response is success.
            </summary>
        </member>
        <member name="P:Jha.Services.TweetsCollectorService.Models.Responses.PullTweetsResponse.JobId">
            <summary>
            Gets or sets the background job identifier.
            </summary>
        </member>
        <member name="P:Jha.Services.TweetsCollectorService.Models.Responses.PullTweetsResponse.JobUri">
            <summary>
            Gets or sets the background job dashboard URL.
            </summary>
        </member>
        <member name="T:Jha.Services.TweetsCollectorService.Models.Responses.UnsuccessResonse">
            <summary>
            The unsuccess reponse model.
            </summary>
        </member>
        <member name="M:Jha.Services.TweetsCollectorService.Models.Responses.UnsuccessResonse.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Jha.Services.TweetsCollectorService.Models.Responses.UnsuccessResonse"/> class.
            </summary>
        </member>
        <member name="M:Jha.Services.TweetsCollectorService.Models.Responses.UnsuccessResonse.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Jha.Services.TweetsCollectorService.Models.Responses.UnsuccessResonse"/> class.
            </summary>
            <param name="message">The response message.</param>
            <exception cref="T:System.ArgumentNullException">When argument is not supplied.</exception>
        </member>
        <member name="P:Jha.Services.TweetsCollectorService.Models.Responses.UnsuccessResonse.IsSuccess">
            <summary>
            Gets or sets whether response is success.
            </summary>
        </member>
        <member name="P:Jha.Services.TweetsCollectorService.Models.Responses.UnsuccessResonse.Message">
            <summary>
            Gets or sets the response message.
            </summary>
        </member>
        <member name="T:Jha.Services.TweetsCollectorService.Models.Twitter.Tweet">
            <summary>
            The tweet model.
            </summary>
        </member>
        <member name="M:Jha.Services.TweetsCollectorService.Models.Twitter.Tweet.#ctor(Jha.Services.TweetsCollectorService.Models.Twitter.TweetBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Jha.Services.TweetsCollectorService.Models.Twitter.Tweet"/> class.
            </summary>
            <param name="tweet">The basic tweet instance.</param>
            <exception cref="T:System.ArgumentNullException">When argument is not supplied.</exception>
        </member>
        <member name="M:Jha.Services.TweetsCollectorService.Models.Twitter.Tweet.#ctor(Jha.Services.TweetsCollectorService.Models.Twitter.TweetText)">
            <summary>
            Initializes a new instance of the <see cref="T:Jha.Services.TweetsCollectorService.Models.Twitter.Tweet"/> class.
            </summary>
            <param name="tweet">The tweet text instance.</param>
            <exception cref="T:System.ArgumentNullException">When argument is not supplied.</exception>
        </member>
        <member name="P:Jha.Services.TweetsCollectorService.Models.Twitter.Tweet.Meta">
            <summary>
            Gets the tweet metadata.
            </summary>
        </member>
        <member name="M:Jha.Services.TweetsCollectorService.Models.Twitter.Tweet.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Jha.Services.TweetsCollectorService.Models.Twitter.TweetBase">
            <summary>
            Represends the tweet basic entity.
            </summary>
        </member>
        <member name="P:Jha.Services.TweetsCollectorService.Models.Twitter.TweetBase.Id">
            <summary>
            Gets or sets the tweet identifier.
            </summary>
        </member>
        <member name="P:Jha.Services.TweetsCollectorService.Models.Twitter.TweetBase.Text">
            <summary>
            Gets or sets the tweet text.
            </summary>
        </member>
        <member name="M:Jha.Services.TweetsCollectorService.Models.Twitter.TweetBase.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Jha.Services.TweetsCollectorService.Models.Twitter.TweetMeta">
            <summary>
            The tweet metadata model.
            </summary>
        </member>
        <member name="M:Jha.Services.TweetsCollectorService.Models.Twitter.TweetMeta.#ctor(Jha.Services.TweetsCollectorService.Models.Twitter.TweetBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Jha.Services.TweetsCollectorService.Models.Twitter.TweetMeta"/> class.
            </summary>
            <param name="tweet">The base tweet instance.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Jha.Services.TweetsCollectorService.Models.Twitter.TweetMeta.#ctor(Jha.Services.TweetsCollectorService.Models.Twitter.TweetText)">
            <summary>
            Initializes a new instance of the <see cref="T:Jha.Services.TweetsCollectorService.Models.Twitter.TweetMeta"/> class.
            </summary>
            <param name="tweet">The tweet text instance.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="P:Jha.Services.TweetsCollectorService.Models.Twitter.TweetMeta.CreatedAtUtc">
            <summary>
            Gets a time when tweet created.
            </summary>
        </member>
        <member name="P:Jha.Services.TweetsCollectorService.Models.Twitter.TweetMeta.TweetLength">
            <summary>
            Gets the tweet length
            </summary>
        </member>
        <member name="P:Jha.Services.TweetsCollectorService.Models.Twitter.TweetMeta.TransactionId">
            <summary>
            Gets or sets the transaction identifier.
            </summary>
        </member>
        <member name="T:Jha.Services.TweetsCollectorService.Models.Twitter.TweetResponse`1">
            <summary>
            The tweet response model.
            </summary>
            <typeparam name="T">Tweet response data class.</typeparam>
        </member>
        <member name="P:Jha.Services.TweetsCollectorService.Models.Twitter.TweetResponse`1.Data">
            <summary>
            Gets or sets the data.
            </summary>
        </member>
        <member name="T:Jha.Services.TweetsCollectorService.Models.Twitter.TweetStatReport">
            <summary>
            The Twitter statisic report model.
            </summary>
        </member>
        <member name="P:Jha.Services.TweetsCollectorService.Models.Twitter.TweetStatReport.OldestTweetAddedAtUtc">
            <summary>
            Gets or sets the oldest tweet time (UTC)
            </summary>
        </member>
        <member name="P:Jha.Services.TweetsCollectorService.Models.Twitter.TweetStatReport.YoungestTweetAddedAt">
            <summary>
            Gets or sets the youngest tweet time (UTC)
            </summary>
        </member>
        <member name="P:Jha.Services.TweetsCollectorService.Models.Twitter.TweetStatReport.TotalTweets">
            <summary>
            Gets or sets the total tweets number.
            </summary>
        </member>
        <member name="P:Jha.Services.TweetsCollectorService.Models.Twitter.TweetStatReport.TweetsPerMinute">
            <summary>
            Gets or sets the tweets added per minute.
            </summary>
        </member>
        <member name="P:Jha.Services.TweetsCollectorService.Models.Twitter.TweetStatReport.MinTweetLength">
            <summary>
            Gets or sets the minum tweet length.
            </summary>
        </member>
        <member name="P:Jha.Services.TweetsCollectorService.Models.Twitter.TweetStatReport.MaxTweetLength">
            <summary>
            Gets or sets the maximum tweet length.
            </summary>
        </member>
        <member name="P:Jha.Services.TweetsCollectorService.Models.Twitter.TweetStatReport.AvgTweetLength">
            <summary>
            Gets or sets the average tweet length.
            </summary>
        </member>
        <member name="T:Jha.Services.TweetsCollectorService.Models.Twitter.TweetText">
            <summary>
            The tweet text model.
            </summary>
        </member>
        <member name="M:Jha.Services.TweetsCollectorService.Models.Twitter.TweetText.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Jha.Services.TweetsCollectorService.Models.Twitter.TweetText"/> class.
            </summary>
        </member>
        <member name="M:Jha.Services.TweetsCollectorService.Models.Twitter.TweetText.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Jha.Services.TweetsCollectorService.Models.Twitter.TweetText"/> class.
            </summary>
            <param name="text">The tweet text</param>
            <exception cref="T:System.ArgumentNullException">When argument is not supplied.</exception>
        </member>
        <member name="P:Jha.Services.TweetsCollectorService.Models.Twitter.TweetText.Text">
            <summary>
            Gets or sets the tweet text.
            </summary>
        </member>
        <member name="T:Jha.Services.TweetsCollectorService.Services.Hanfire.Twitter.ITwitterBackgroundJob">
            <summary>
            The Twitter background job interface
            </summary>
        </member>
        <member name="M:Jha.Services.TweetsCollectorService.Services.Hanfire.Twitter.ITwitterBackgroundJob.PullTweetsIntoStorage(Hangfire.Server.PerformContext)">
            <summary>
            Starts a backgrond job that pulls tweets from Tweeter stream API
            and adds them to the storage.
            </summary>
            <param name="context">The background job perform context.</param>
            <returns>A task that represents asynchronious operation.</returns>
        </member>
        <member name="T:Jha.Services.TweetsCollectorService.Services.Hanfire.Twitter.TwitterBackgroundJob">
            <summary>
            The Twitter related tasks background jobs service.
            </summary>
        </member>
        <member name="M:Jha.Services.TweetsCollectorService.Services.Hanfire.Twitter.TwitterBackgroundJob.#ctor(Jha.Services.TweetsCollectorService.Services.Twitter.ITwitterService,Jha.Services.TweetsCollectorService.Services.Storage.IRepository{Jha.Services.TweetsCollectorService.Models.Twitter.Tweet},Microsoft.Extensions.Logging.ILogger{Jha.Services.TweetsCollectorService.Services.Hanfire.Twitter.TwitterBackgroundJob})">
            <summary>
            Initializes a new instance of the <see cref="T:Jha.Services.TweetsCollectorService.Services.Hanfire.Twitter.TwitterBackgroundJob"/> class.
            </summary>
            <param name="twitter">The injected Twitter service.</param>
            <param name="tweetsRepository">The injected tweets repository.</param>
            <param name="logger">The injected logger.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Jha.Services.TweetsCollectorService.Services.Hanfire.Twitter.TwitterBackgroundJob.PullTweetsIntoStorage(Hangfire.Server.PerformContext)">
            <inheritdoc/>
        </member>
        <member name="T:Jha.Services.TweetsCollectorService.Services.Storage.IRepository`1">
            <summary>
            The storage interface.
            </summary>
            <typeparam name="T">A storage model class.</typeparam>
        </member>
        <member name="M:Jha.Services.TweetsCollectorService.Services.Storage.IRepository`1.Add(`0)">
            <summary>
            Adds a new entity to the storage.
            </summary>
            <param name="entity">The entity.</param>
            <returns>An added entity.</returns>
        </member>
        <member name="M:Jha.Services.TweetsCollectorService.Services.Storage.IRepository`1.GetFirstOrDefault(System.Func{`0,System.Boolean})">
            <summary>
            Gets an entity from the storage which satisfies the predicate.
            </summary>
            <param name="predicate">Search query predicate.</param>
            <returns>The enityt if found, otherwise null.</returns>
        </member>
        <member name="M:Jha.Services.TweetsCollectorService.Services.Storage.IRepository`1.GetAllWhere(System.Func{`0,System.Boolean})">
            <summary>
            Get all entities from the storage which satisfies the predicate.
            </summary>
            <param name="predicate">Search query predicate. If null, all entities will be returned.</param>
            <returns>A colletion of entities.</returns>
        </member>
        <member name="M:Jha.Services.TweetsCollectorService.Services.Storage.IRepository`1.RemoveFirstOrDefault(System.Func{`0,System.Boolean})">
            <summary>
            Removes an entity from the storage which satisfies the predicate.
            </summary>
            <param name="predicate">Search query predicate.</param>
            <returns>The removed entity if found, otherwise null.</returns>
        </member>
        <member name="M:Jha.Services.TweetsCollectorService.Services.Storage.IRepository`1.Count">
            <summary>
            Count entities in the store.
            </summary>
            <returns>The entities count.</returns>
        </member>
        <member name="M:Jha.Services.TweetsCollectorService.Services.Storage.IRepository`1.Clear">
            <summary>
            Clears the storage.
            </summary>
        </member>
        <member name="T:Jha.Services.TweetsCollectorService.Services.Storage.TweetRepository">
            <summary>
            The Twitter tweets in memory storage.
            </summary>
        </member>
        <member name="M:Jha.Services.TweetsCollectorService.Services.Storage.TweetRepository.#ctor(Microsoft.Extensions.Logging.ILogger{Jha.Services.TweetsCollectorService.Services.Storage.TweetRepository})">
            <summary>
            Initializes a new instance of the <see cref="T:Jha.Services.TweetsCollectorService.Services.Storage.TweetRepository"/> class.
            </summary>
            <param name="logger">The injected logger.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Jha.Services.TweetsCollectorService.Services.Storage.TweetRepository.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Jha.Services.TweetsCollectorService.Services.Storage.TweetRepository.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Jha.Services.TweetsCollectorService.Services.Storage.TweetRepository.Add(Jha.Services.TweetsCollectorService.Models.Twitter.Tweet)">
            <inheritdoc/>
        </member>
        <member name="M:Jha.Services.TweetsCollectorService.Services.Storage.TweetRepository.Clear">
            <inheritdoc/>
        </member>
        <member name="M:Jha.Services.TweetsCollectorService.Services.Storage.TweetRepository.Count">
            <inheritdoc/>
        </member>
        <member name="M:Jha.Services.TweetsCollectorService.Services.Storage.TweetRepository.GetAllWhere(System.Func{Jha.Services.TweetsCollectorService.Models.Twitter.Tweet,System.Boolean})">
            <inheritdoc/>
        </member>
        <member name="M:Jha.Services.TweetsCollectorService.Services.Storage.TweetRepository.GetFirstOrDefault(System.Func{Jha.Services.TweetsCollectorService.Models.Twitter.Tweet,System.Boolean})">
            <inheritdoc/>
        </member>
        <member name="M:Jha.Services.TweetsCollectorService.Services.Storage.TweetRepository.RemoveFirstOrDefault(System.Func{Jha.Services.TweetsCollectorService.Models.Twitter.Tweet,System.Boolean})">
            <inheritdoc/>
        </member>
        <member name="T:Jha.Services.TweetsCollectorService.Services.Twitter.ITwitterService">
            <summary>
            The Twitter service interface.
            </summary>
        </member>
        <member name="M:Jha.Services.TweetsCollectorService.Services.Twitter.ITwitterService.GetTweetsStream(System.Threading.CancellationToken)">
            <summary>
            Gets sample streamed tweets.
            </summary>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Streamed sample tweets.</returns>
        </member>
        <member name="T:Jha.Services.TweetsCollectorService.Services.Twitter.ITwitterStatisticService">
            <summary>
            The Twitter statistic service interface.
            </summary>
        </member>
        <member name="M:Jha.Services.TweetsCollectorService.Services.Twitter.ITwitterStatisticService.GenerateReport">
            <summary>
            Generates the statistic report.
            </summary>
            <returns>The report.</returns>
        </member>
        <member name="T:Jha.Services.TweetsCollectorService.Services.Twitter.TwitterService">
            <summary>
            The Twitter API client.
            </summary>
        </member>
        <member name="M:Jha.Services.TweetsCollectorService.Services.Twitter.TwitterService.#ctor(System.Net.Http.HttpClient,Microsoft.Extensions.Options.IOptions{Jha.Services.TweetsCollectorService.Models.Configuration.TwitterConfiguration})">
            <summary>
            Initializes a new instance of the <see cref="T:Jha.Services.TweetsCollectorService.Services.Twitter.TwitterService"/> class.
            </summary>
            <param name="client">The injected HTTP client.</param>
            <param name="configuration">The injected </param>
            <exception cref="T:System.ArgumentNullException">Argument is not injected.</exception>
        </member>
        <member name="M:Jha.Services.TweetsCollectorService.Services.Twitter.TwitterService.GetTweetsStream(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:Jha.Services.TweetsCollectorService.Services.Twitter.TwitterStatisticService">
            <summary>
            The Twitter statisctic service.
            </summary>
        </member>
        <member name="M:Jha.Services.TweetsCollectorService.Services.Twitter.TwitterStatisticService.#ctor(Jha.Services.TweetsCollectorService.Services.Storage.IRepository{Jha.Services.TweetsCollectorService.Models.Twitter.Tweet})">
            <summary>
            Initializes a new instance of the <see cref="T:Jha.Services.TweetsCollectorService.Services.Twitter.TwitterStatisticService"/> class.
            </summary>
            <param name="tweetsRepository">The injected twitter repository service.</param>
        </member>
        <member name="M:Jha.Services.TweetsCollectorService.Services.Twitter.TwitterStatisticService.GenerateReport">
            <inheritdoc/>
        </member>
        <member name="T:Jha.Services.TweetsCollectorService.Startup.ApplicationBuilderExtensions.HangfireApplicationBuilderExtensions">
            <summary>
            Extensions to configure Hangfire.
            </summary>
        </member>
        <member name="M:Jha.Services.TweetsCollectorService.Startup.ApplicationBuilderExtensions.HangfireApplicationBuilderExtensions.UseAndConfigureHanfire(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            
            </summary>
            <param name="builder"></param>
            <returns></returns>
        </member>
        <member name="T:Jha.Services.TweetsCollectorService.Startup.ServiceCollectionExtensions.ControllerServices">
            <summary>
            Controllers services extensions.
            </summary>
        </member>
        <member name="M:Jha.Services.TweetsCollectorService.Startup.ServiceCollectionExtensions.ControllerServices.AddControllerServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds ASP.Net controller related services to the container.
            </summary>
            <param name="services">Services collection.</param>
            <returns>Services collection.</returns>
        </member>
        <member name="T:Jha.Services.TweetsCollectorService.Startup.ServiceCollectionExtensions.HangfireServices">
            <summary>
            The Hangfire services extensions.
            </summary>
        </member>
        <member name="M:Jha.Services.TweetsCollectorService.Startup.ServiceCollectionExtensions.HangfireServices.AddHangfireServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds Hangfire related services to the container.
            </summary>
            <param name="services">Services collection.</param>
            <returns>Services collection.</returns>
        </member>
        <member name="T:Jha.Services.TweetsCollectorService.Startup.ServiceCollectionExtensions.TwitterServices">
            <summary>
            The Twitter services extensions.
            </summary>
        </member>
        <member name="M:Jha.Services.TweetsCollectorService.Startup.ServiceCollectionExtensions.TwitterServices.AddTwitterServices(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Adds Twitter related services to the container.
            </summary>
            <param name="services">Services collection.</param>
            <param name="configuration">Application configuration.</param>
            <returns>Services collection.</returns>
        </member>
    </members>
</doc>
